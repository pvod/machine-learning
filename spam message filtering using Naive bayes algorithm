# SMS Spam filter using Naive Bayes algorithm

sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
head(sms_raw)

#converting categorical to factor
sms_raw$type <- factor(sms_raw$type)
str(sms_raw)
table(sms_raw$type)


#Processing SMS text data using tm package
install.packages("tm")
library(tm)
install.packages("NLP")
library(NLP)

sms_corpus <- Corpus(VectorSource(sms_raw$text))
print(sms_corpus)
inspect(sms_corpus[1:3])

#convert all of the SMS messages to lowercase and remove any numbers
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
inspect(corpus_clean[1:3])

#splitting data for train and test
s=sample(nrow(sms_raw),0.75*(nrow(sms_raw)))
sms_dtm <- DocumentTermMatrix(corpus_clean)
sms_raw_train <- sms_raw[s, ]
sms_raw_test <- sms_raw[-s, ]
#s_dtm=sample(nrow(sms_dtm),0.75*(nrow(sms_)))
sms_dtm_train <- sms_dtm[s, ]
sms_dtm_test <- sms_dtm[-s, ]
sms_corpus_train <- corpus_clean[s]
sms_corpus_test <- corpus_clean[-s]
prop.table(table(sms_raw_train$type))
prop.table(table(sms_raw_test$type))

#Visualizing text data using word clouds package
install.packages("wordcloud")
library(wordcloud)
wordcloud(sms_corpus_train, min.freq = 40, random.order = FALSE)
spam <- subset(sms_raw_train, type == "spam")
ham <- subset(sms_raw_train, type == "ham")
wordcloud(spam$text, max.words = 40, scale = c(3, 0.5))
wordcloud(ham$text, max.words = 40, scale = c(3, 0.5))

#creating indicator features for frequent words
frequent_terms <- findFreqTerms(sms_dtm_train,5)
sms_dtm_freq_train <- sms_dtm_train[,frequent_terms]
sms_dtm_freq_test <- sms_dtm_test[,frequent_terms]

#convert_counts() function to convert counts to factors
convert_counts <- function(x){
  x <- ifelse(x > 0,"Yes","No")
}
sms_train <- apply(sms_dtm_freq_train,MARGIN = 2,convert_counts)
sms_test <- apply(sms_dtm_freq_test,MARGIN = 2,convert_counts)


#training a model on the data using e1071
install.packages("e1071")
library(e1071)
sms_classifier <- naiveBayes(sms_train, sms_raw_train$type)

#evaluating model performance
sms_test_pred <- predict(sms_classifier,sms_test)
install.packages("gmodels")
library(gmodels)
CrossTable(sms_test_pred,sms_raw_test$type,
           prop.chisq = FALSE,
           prop.t = FALSE,
           dnn = c("predicted","actual"))

#improving model performance
sms_classifier2 <- naiveBayes(sms_train, sms_raw_train$type,
                              laplace = 1)
sms_test_pred2 <- predict(sms_classifier2, sms_test)
CrossTable(sms_test_pred2, sms_raw_test$type,
           prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,
           dnn = c('predicted', 'actual'))
